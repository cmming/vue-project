1.集中请求服务
    1.1创建封装ajax相关的数据 config/settings.js
    1.2封装axios便于后面调用




2.验证支持的方式

after
alpha
alpha_dash
alpha_num
alpha_spaces
before
between
confirmed 
credit_card
date_between
date_format
decimal
digits
dimensions
email
ext
image
in
ip
max
max_value
mimes
min
min_value
not_in
numeric
regex
required
size
url

after{target} - 比target要大的一个合法日期，格式(DD/MM/YYYY)
alpha - 只包含英文字符
alpha_dash - 可以包含英文、数字、下划线、破折号
alpha_num - 可以包含英文和数字
before:{target} - 和after相反
between:{min},{max} - 在min和max之间的数字
confirmed:{target} - 必须和target一样
date_between:{min,max} - 日期在min和max之间
date_format:{format} - 合法的format格式化日期
decimal:{decimals?} - 数字，而且是decimals进制
digits:{length} - 长度为length的数字
dimensions:{width},{height} - 符合宽高规定的图片
email - 不解释
ext:[extensions] - 后缀名
image - 图片
in:[list] - 包含在数组list内的值
ip - ipv4地址
max:{length} - 最大长度为length的字符
mimes:[list] - 文件类型
min - max相反
mot_in - in相反
numeric - 只允许数字
regex:{pattern} - 值必须符合正则pattern
required - 不解释
size:{kb} - 文件大小不超过
url:{domain?} - (指定域名的)url


自定义错误的初始值
var zh_CN = {
      after: (field, [target]) => ` ${field}必须在${target}之后`,
      alpha_dash: (field) => ` ${field}能够包含字母数字字符，包括破折号、下划线`,
      alpha_num: (field) => `${field} 只能包含字母数字字符.`,
      alpha_spaces: (field) => ` ${field} 只能包含字母字符，包括空格.`,
      alpha: (field) => ` ${field} 只能包含字母字符.`,
      before: (field, [target]) => ` ${field} 必须在${target} 之前.`,
      between: (field, [min, max]) => ` ${field} 必须在${min} ${max}之间.`,
      confirmed: (field, [confirmedField]) => ` ${field} 不能和${confirmedField}匹配.`,
      date_between: (field, [min, max]) => ` ${field}必须在${min}和${max}之间.`,
      date_format: (field, [format]) => ` ${field}必须在在${format}格式中.`,
      decimal: (field, [decimals] = ['*']) => ` ${field} 必须是数字的而且能够包含${decimals === '*' ? '' : decimals} 小数点.`,
      digits: (field, [length]) => ` ${field} 必须是数字，且精确到 ${length}数`,
      dimensions: (field, [width, height]) => ` ${field}必须是 ${width} 像素到 ${height} 像素.`,
      email: (field) => ` ${field} 必须是有效的邮箱.`,
      ext: (field) => ` ${field} 必须是有效的文件.`,
      image: (field) => ` ${field} 必须是图片.`,
      in: (field) => ` ${field} 必须是一个有效值.`,
      ip: (field) => ` ${field} 必须是一个有效的地址.`,
      max: (field, [length]) => ` ${field} 不能大于${length}字符.`,
      mimes: (field) => ` ${field} 必须是有效的文件类型.`,
      min: (field, [length]) => ` ${field} 必须至少有 ${length} 字符.`,
      not_in: (field) => ` ${field}必须是一个有效值.`,
      numeric: (field) => ` ${field} 只能包含数字字符.`,
      regex: (field) => ` ${field} 格式无效.`,
      required: (field) => `${field} 是必须的.`,
      size: (field, [size]) => ` ${field} 必须小于 ${size} KB.`,
      url: (field) => ` ${field}不是有效的url.`
    };

$coin_type=$Admin->Cur_COIN_TYPE;


路由配置  this.$router.push('home')在js中设置路由跳转  this.$route.params

将一个对象转换为json字符串
JSON.stringify